declare global {
    namespace Cypress {
        interface Chainable {
            /** Flush the axe-core result queue by sending results to the server. */
            axeWatcherFlush(): Chainable<void>;
            /**
             * Flush the axe-core result queue by sending results to the server.
             *
             * @deprecated Use cy.axeWatcherFlush() instead
             */
            axeFlush(): Chainable<void>;
            /** Perform an axe-core analysis. */
            axeWatcherAnalyze(params?: {
                __Method?: string;
                __UserRequestedAnalyze?: boolean;
            }): Chainable<void>;
            /**
             * Perform an axe-core analysis.
             *
             * @Deprecated Use cy.axeWatcherAnalyze() instead
             */
            axeAnalyze(params?: {
                __Method?: string;
                __UserRequestedAnalyze?: boolean;
            }): Chainable<void>;
            /**
             * Start automatic analysis mode.
             */
            axeWatcherStart(): Chainable<void>;
            /**
             * Start automatic analysis mode.
             *
             * @Deprecated Use cy.axeWatcherStart() instead
             */
            axeStart(): Chainable<void>;
            /**
             * Stop automatic analysis mode.
             */
            axeWatcherStop(): Chainable<void>;
            /**
             * Stop automatic analysis mode.
             *
             * @Deprecated Use cy.axeWatcherStop() instead
             */
            axeStop(): Chainable<void>;
        }
    }
}
type CypressMethod = keyof Cypress.Chainable;
/** Commands we wrap to help us identify new page states. */
export declare const WRAPPED_COMMANDS: ReadonlyArray<CypressMethod>;
export {};
