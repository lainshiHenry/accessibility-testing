import type { LaunchOptions, BrowserLaunchArgumentOptions, BrowserConnectOptions, Page, BrowserContext } from 'puppeteer';
import Controller from './Controller';
import { type Configuration } from './utils/writeVariables';
type Options = LaunchOptions & BrowserConnectOptions & BrowserLaunchArgumentOptions;
/**
 * Creates a Puppeteer config that uses axe extension.
 *
 * @param opts Config to extend
 */
export declare function puppeteerConfig(opts: Configuration & Options): Options;
export declare class PuppeteerController extends Controller {
    private driver;
    constructor(driver: Page);
    protected executeScript<T>(fn: string | (() => Promise<T>), ...args: unknown[]): Promise<T>;
}
/**
 * @deprecated `wrapPuppeteer` is deprecated and may not work as intended. Please use `wrapPuppeteerPage` instead.
 */
export declare const wrapPuppeteer: (browserContext: BrowserContext, controller: PuppeteerController) => BrowserContext;
export { wrapPage as wrapPuppeteerPage } from './puppeteerWrapping';
