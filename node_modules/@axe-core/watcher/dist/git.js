"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTag = exports.isDirty = exports.getCommitInfo = exports.getRemoteURL = exports.parseDefaultFromShowRemoteOutput = exports.getDefaultBranchName = exports.getBranchName = exports.isRepository = void 0;
const child_process_1 = require("child_process");
const isRepository = (dir = process.cwd()) => {
    try {
        (0, child_process_1.execSync)('git rev-parse --is-inside-work-tree', {
            cwd: dir,
            stdio: 'ignore'
        });
        return true;
    }
    catch (_a) {
        return false;
    }
};
exports.isRepository = isRepository;
const getBranchName = (dir = process.cwd()) => {
    try {
        return (0, child_process_1.execSync)('git rev-parse --abbrev-ref HEAD', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        })
            .toString()
            .trim();
    }
    catch (_a) {
        return null;
    }
};
exports.getBranchName = getBranchName;
const getDefaultBranchName = (dir = process.cwd()) => {
    try {
        const stdout = (0, child_process_1.execSync)('git symbolic-ref --short refs/remotes/origin/HEAD', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        }).toString();
        return (0, exports.parseDefaultFromShowRemoteOutput)(stdout);
    }
    catch (_a) {
        return null;
    }
};
exports.getDefaultBranchName = getDefaultBranchName;
const parseDefaultFromShowRemoteOutput = (output) => {
    const match = output.match(/origin\/(.+)/);
    return match ? match[1] : null;
};
exports.parseDefaultFromShowRemoteOutput = parseDefaultFromShowRemoteOutput;
const getRemoteURL = (dir = process.cwd()) => {
    try {
        return (0, child_process_1.execSync)('git config --get remote.origin.url', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        })
            .toString()
            .trim();
    }
    catch (_a) {
        return null;
    }
};
exports.getRemoteURL = getRemoteURL;
const getCommitInfo = (dir = process.cwd()) => {
    try {
        const stdout = (0, child_process_1.execSync)('git show --no-patch --format="%s%n%H%n%an%n%ae"', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        });
        const [message, hash, author, email] = stdout.toString().trim().split('\n');
        return { message, hash, author, email };
    }
    catch (_a) {
        return null;
    }
};
exports.getCommitInfo = getCommitInfo;
const isDirty = (dir = process.cwd()) => {
    try {
        const stdout = (0, child_process_1.execSync)('git status --short', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        });
        return stdout.length > 0;
    }
    catch (_a) {
        return false;
    }
};
exports.isDirty = isDirty;
const getTag = (dir = process.cwd()) => {
    try {
        return (0, child_process_1.execSync)('git describe --tags --exact', {
            cwd: dir,
            stdio: ['ignore', 'pipe', 'ignore']
        })
            .toString()
            .trim();
    }
    catch (_a) {
        return null;
    }
};
exports.getTag = getTag;
//# sourceMappingURL=git.js.map