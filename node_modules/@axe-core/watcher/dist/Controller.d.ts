import type { Debugger } from 'debug';
interface ControllerParams {
    /** The namespace for the debug logger. */
    debugLoggerName: string;
}
declare abstract class Controller {
    protected abstract executeScript<A = unknown, T = void>(fn: string | ((...args: A[]) => Promise<T>), ...args: unknown[]): Promise<T>;
    protected isStopped: boolean;
    protected debugLogger: Debugger;
    constructor({ debugLoggerName }: ControllerParams);
    start(): Promise<void>;
    stop(): Promise<void>;
    analyze({ __Method, __UserRequestedAnalyze }?: {
        __Method?: string;
        __UserRequestedAnalyze?: boolean;
    }): Promise<void>;
    flush(): Promise<void>;
}
export default Controller;
