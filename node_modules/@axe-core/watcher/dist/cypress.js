"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressConfig = void 0;
const sendResultsToServer_1 = __importDefault(require("./sendResultsToServer"));
const EventForwarder_1 = __importDefault(require("./EventForwarder"));
const writeVariables_1 = __importDefault(require("./utils/writeVariables"));
const writeExtensionManifest_1 = __importDefault(require("./utils/writeExtensionManifest"));
const headlessNotSupportedError_1 = require("./utils/headlessNotSupportedError");
const mergeChromeArgs_1 = __importDefault(require("./utils/mergeChromeArgs"));
const createDebugger_1 = __importDefault(require("./createDebugger"));
const debugLogger = (0, createDebugger_1.default)('CypressController');
const cypressConfigRunFlag = '__AXE_WATCHER_CYPRESS_CONFIG_RUN';
const cypressConfig = (config) => {
    var _a;
    const { axe, ...userConfig } = config;
    const { DEBUG } = process.env;
    const hasWatcherDebug = DEBUG && DEBUG.includes('axe-watcher');
    (0, writeVariables_1.default)({
        ...axe,
        cypress: true
    });
    (0, writeExtensionManifest_1.default)({
        all_frames: true,
        exclude_globs: [
            '*/__/#/specs/runner?file=*',
            '*/__cypress/iframes/*'
        ]
    });
    if ((_a = userConfig.e2e) === null || _a === void 0 ? void 0 : _a.env) {
        userConfig.e2e.env = Object.assign({}, userConfig.e2e.env, {
            [cypressConfigRunFlag]: true
        });
    }
    else {
        userConfig.env = Object.assign({}, userConfig.env, {
            [cypressConfigRunFlag]: true
        });
    }
    if (hasWatcherDebug) {
        userConfig.env = Object.assign({}, userConfig.env, {
            __AXE_WATCHER_DEBUG: hasWatcherDebug
        });
    }
    return {
        ...userConfig,
        e2e: {
            ...userConfig.e2e,
            async setupNodeEvents(cypressOn, ...args) {
                var _a, _b;
                const eventForwarder = new EventForwarder_1.default();
                const on = eventForwarder.on;
                const userNodeEventConfig = await ((_b = (_a = userConfig.e2e) === null || _a === void 0 ? void 0 : _a.setupNodeEvents) === null || _b === void 0 ? void 0 : _b.call(_a, on, ...args));
                if (userNodeEventConfig) {
                    userNodeEventConfig.env = Object.assign({}, userNodeEventConfig.env, {
                        [cypressConfigRunFlag]: true
                    });
                }
                on('task', {
                    __uploadAxeWatcherResults: async ({ results, skipped_url }) => {
                        if (!(results === null || results === void 0 ? void 0 : results.length) && !skipped_url) {
                            return null;
                        }
                        await (0, sendResultsToServer_1.default)({
                            skipped_url,
                            results,
                            debugLogger
                        });
                        return null;
                    },
                    __debugAxeWatcher: (message) => {
                        debugLogger(message);
                        return null;
                    }
                });
                on('before:browser:launch', (browser, launchOptions) => {
                    if (browser.name.startsWith('firefox') ||
                        browser.name.startsWith('electron')) {
                        throw new Error(`The @axe-core/watcher package only supports running in Chrome, but Cypress is configured with browser "${browser.name}". Please refer to our System Requirements for more information: https://docs.deque.com/developer-hub/2/en/dh-system-requirements`);
                    }
                    if (browser.isHeadless && launchOptions.args.includes('--headless')) {
                        throw new headlessNotSupportedError_1.HeadlessNotSupportedError('In Cypress, "--headless=new" became the default headless mode in Cypress version 12.15.0. Ensure your Cypress version is up to date and that you are not using a "before:browser:launch" configuration that adds "--headless" to launchOptions.args.');
                    }
                    const existingArgs = launchOptions.args;
                    launchOptions.args = (0, mergeChromeArgs_1.default)(existingArgs, {
                        disableOtherExtensions: false
                    });
                    return launchOptions;
                });
                eventForwarder.forward(cypressOn);
                return userNodeEventConfig;
            }
        }
    };
};
exports.cypressConfig = cypressConfig;
//# sourceMappingURL=cypress.js.map