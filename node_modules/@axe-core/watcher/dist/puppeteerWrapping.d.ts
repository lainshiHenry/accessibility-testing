import type { Browser, BrowserContext, Page, Target, ElementHandle, Keyboard, Mouse, Touchscreen, Dialog, Frame, JSHandle, Locator } from 'puppeteer';
import type { PuppeteerController } from './puppeteer';
import { type PossiblyWrapped } from './utils/proxyHandlers';
export declare const wrapBrowserContext: (browserContext: BrowserContext, controller: PuppeteerController) => BrowserContext;
export declare const wrapBrowser: (browser: Browser, controller: PuppeteerController) => Browser;
export declare const wrapPage: (page: Page, controller: PuppeteerController) => Page;
export declare const wrapTarget: (target: Target, controller: PuppeteerController) => Target;
export declare const wrapElementHandle: (elementHandle: PossiblyWrapped<ElementHandle<any>>, controller: PuppeteerController) => ElementHandle;
export declare const wrapKeyboard: (keyboard: PossiblyWrapped<Keyboard>, controller: PuppeteerController) => Keyboard;
export declare const wrapMouse: (mouse: PossiblyWrapped<Mouse>, controller: PuppeteerController) => Mouse;
export declare const wrapTouchscreen: (touchscreen: PossiblyWrapped<Touchscreen>, controller: PuppeteerController) => Touchscreen;
export declare const wrapDialog: (dialog: PossiblyWrapped<Dialog>, controller: PuppeteerController) => Dialog;
export declare const wrapFrame: (frame: PossiblyWrapped<Frame>, controller: PuppeteerController) => Frame;
export declare const wrapLocator: (locator: PossiblyWrapped<Locator<any>>, controller: PuppeteerController) => Locator<any>;
export declare const wrapJSHandle: (frame: PossiblyWrapped<JSHandle>, controller: PuppeteerController) => JSHandle;
