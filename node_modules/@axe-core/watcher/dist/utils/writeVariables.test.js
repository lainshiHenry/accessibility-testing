"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const sinon_1 = __importDefault(require("sinon"));
const fs_1 = __importDefault(require("fs"));
const git = __importStar(require("../git"));
const initializeSessionImp = __importStar(require("./initializeSession"));
const writeVariables_1 = __importDefault(require("./writeVariables"));
describe('writeVariables', () => {
    beforeEach(() => {
        sinon_1.default.stub(initializeSessionImp, 'default').returns('123');
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    describe('given `sessionId` variable', () => {
        describe('when provided', () => {
            it('should write to variables.json', () => {
                const gitStub = sinon_1.default.stub(git);
                gitStub.getBranchName.returns('main');
                gitStub.getDefaultBranchName.returns('main');
                gitStub.getRemoteURL.returns('url');
                gitStub.isRepository.returns(true);
                gitStub.isDirty.returns(false);
                gitStub.getTag.returns(null);
                gitStub.getCommitInfo.returns({
                    message: 'message',
                    author: 'author',
                    email: 'email',
                    hash: 'hash'
                });
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc',
                    serverURL: 'http://localhost:3000/',
                    sessionId: '123',
                    takeScreenshots: true,
                    experimentalAdvancedRules: true
                });
                chai_1.assert.isTrue(writeFileSync.calledOnce);
                const stored = JSON.parse(writeFileSync.args[0][1]);
                chai_1.assert.deepEqual(stored, {
                    api_key: 'abc',
                    server_url: 'http://localhost:3000/',
                    auto_analyze: true,
                    session_id: '123',
                    cypress: false,
                    take_screenshots: true,
                    experimental_advanced_rules: true,
                    run_context: null,
                    run_options: null,
                    exclude_url_patterns: null,
                    git_data: {
                        git_branch: 'main',
                        git_default_branch: 'main',
                        git_url: 'url',
                        git_tag: null,
                        git_commit_message: 'message',
                        git_commit_author: 'author',
                        git_commit_email: 'email',
                        git_commit_sha: 'hash',
                        git_is_dirty: false
                    }
                });
            });
        });
        describe('when not provided', () => {
            it('creates a session ID and writes it to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc'
                });
                chai_1.assert.isTrue(writeFileSync.calledOnce);
                const variables = JSON.parse(writeFileSync.args[0][1]);
                chai_1.assert.exists(variables.session_id);
            });
        });
    });
    describe(`runContext`, () => {
        describe('when provided', () => {
            it('should write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc',
                    runContext: { include: 'foo', exclude: 'bar' }
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                const runContext = stored.run_context;
                chai_1.assert.isDefined(runContext);
                chai_1.assert.deepEqual(runContext, { include: 'foo', exclude: 'bar' });
            });
        });
        describe('when not provided', () => {
            it('should not write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc'
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                chai_1.assert.isNull(stored.run_context);
            });
        });
    });
    describe(`runOptions`, () => {
        describe('when provided', () => {
            it('should write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc',
                    runOptions: {
                        ancestry: true,
                        rules: { 'color-contrast': { enabled: false } },
                        runOnly: { type: 'rules', values: ['color-contrast'] }
                    }
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                const runOptions = stored.run_options;
                chai_1.assert.isDefined(runOptions);
                chai_1.assert.deepEqual(runOptions, {
                    ancestry: true,
                    rules: { 'color-contrast': { enabled: false } },
                    runOnly: { type: 'rules', values: ['color-contrast'] }
                });
            });
        });
        describe('when not provided', () => {
            it('should not write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc'
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                chai_1.assert.isNull(stored.run_options);
            });
        });
    });
    describe(`excludeUrlPatterns`, () => {
        describe('when provided', () => {
            it('should write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc',
                    excludeUrlPatterns: ['foo', 'bar']
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                const excludeUrlPatterns = stored.exclude_url_patterns;
                chai_1.assert.isDefined(excludeUrlPatterns);
                chai_1.assert.deepEqual(excludeUrlPatterns, ['foo', 'bar']);
            });
        });
        describe('when not provided', () => {
            it('should not write to variables.json', () => {
                const writeFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
                (0, writeVariables_1.default)({
                    apiKey: 'abc'
                });
                const stored = JSON.parse(writeFileSync.args[0][1]);
                chai_1.assert.isNull(stored.exclude_url_patterns);
            });
        });
        describe('throws when invalid', () => {
            it('should throw', () => {
                chai_1.assert.throws(() => {
                    (0, writeVariables_1.default)({
                        apiKey: 'abc',
                        excludeUrlPatterns: ['foo', 'bar', 1]
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=writeVariables.test.js.map