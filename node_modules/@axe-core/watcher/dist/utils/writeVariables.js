"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const git = __importStar(require("../git"));
const fs_1 = __importDefault(require("fs"));
const constants_1 = require("./constants");
const validateAxeRunOptions_1 = require("./validateAxeRunOptions");
const createDebugger_1 = __importDefault(require("../createDebugger"));
const initializeSession_1 = __importDefault(require("./initializeSession"));
const validateAxeRunContext_1 = require("./validateAxeRunContext");
const isValidExcludePattern_1 = __importDefault(require("./isValidExcludePattern"));
const debugLogger = (0, createDebugger_1.default)('config:writeVariables');
const { version } = require('../../package.json');
function writeVariables({ apiKey, autoAnalyze, cypress, serverURL, sessionId, runContext, runOptions, takeScreenshots, experimentalAdvancedRules, excludeUrlPatterns, buildID }) {
    debugLogger('Received configuration:', {
        apiKey: '<redacted>',
        ...(autoAnalyze !== undefined && { autoAnalyze }),
        ...(serverURL !== undefined && { serverURL }),
        ...(sessionId !== undefined && { sessionId }),
        ...(runContext !== undefined && { runContext }),
        ...(runOptions !== undefined && { runOptions }),
        ...(excludeUrlPatterns !== undefined && { excludeUrlPatterns }),
        ...(buildID !== undefined && { buildID })
    });
    if (!serverURL) {
        serverURL = constants_1.DEFAULT_SERVER_URL;
    }
    let urlString;
    try {
        urlString = new URL(serverURL).toString();
    }
    catch (err) {
        throw new Error(`Error when converting serverURL to URL. Ensure it is formatted properly: ${err}`);
    }
    if (typeof runContext !== 'undefined') {
        (0, validateAxeRunContext_1.validateAxeRunContext)(runContext);
        debugLogger('Validated runContext:', runContext);
    }
    if (typeof runOptions !== 'undefined') {
        (0, validateAxeRunOptions_1.validateAxeRunOptions)(runOptions);
        debugLogger('Validated runOptions:', runOptions);
    }
    const gitData = {};
    const isGitRepo = git.isRepository();
    if (isGitRepo) {
        debugLogger('Is this a git project?', { isGitRepo });
        gitData.git_branch = git.getBranchName();
        gitData.git_tag = git.getTag();
        gitData.git_default_branch = git.getDefaultBranchName();
        gitData.git_url = git.getRemoteURL();
        gitData.git_is_dirty = git.isDirty();
        const info = git.getCommitInfo();
        gitData.git_commit_sha = info === null || info === void 0 ? void 0 : info.hash;
        gitData.git_commit_author = info === null || info === void 0 ? void 0 : info.author;
        gitData.git_commit_email = info === null || info === void 0 ? void 0 : info.email;
        gitData.git_commit_message = info === null || info === void 0 ? void 0 : info.message;
    }
    debugLogger('Initializing axe Watcher session');
    const session_id = (0, initializeSession_1.default)({
        apiKey,
        serverURL: urlString,
        watcherVersion: version,
        sessionID: sessionId || null,
        buildID: buildID || null,
        gitCommitSha: gitData.git_commit_sha || null
    });
    if (typeof autoAnalyze === 'undefined') {
        autoAnalyze = true;
    }
    if (excludeUrlPatterns === null || excludeUrlPatterns === void 0 ? void 0 : excludeUrlPatterns.length) {
        (0, isValidExcludePattern_1.default)(excludeUrlPatterns);
    }
    if (!buildID) {
        if (!sessionId && fs_1.default.existsSync(constants_1.PATH_TO_SESSION_FILE)) {
            debugLogger('Reading session ID from file for WDIO Test Runner');
            try {
                const data = JSON.parse(fs_1.default.readFileSync(constants_1.PATH_TO_SESSION_FILE, 'utf8'));
                sessionId = data.id;
            }
            catch (error) {
                throw new Error(`Unable to read session configuration: ${error}`);
            }
        }
    }
    const variables = {
        api_key: apiKey,
        server_url: urlString,
        session_id: session_id || sessionId,
        take_screenshots: !!takeScreenshots,
        auto_analyze: !!autoAnalyze,
        cypress: !!cypress,
        experimental_advanced_rules: !!experimentalAdvancedRules,
        run_context: runContext || null,
        run_options: runOptions || null,
        git_data: gitData,
        exclude_url_patterns: excludeUrlPatterns || null
    };
    fs_1.default.writeFileSync(constants_1.PATH_TO_EXTENSION_VARIABLES, JSON.stringify(variables));
}
exports.default = writeVariables;
//# sourceMappingURL=writeVariables.js.map