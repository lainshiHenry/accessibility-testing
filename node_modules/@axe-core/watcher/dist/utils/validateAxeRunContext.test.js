"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const validateAxeRunContext_1 = require("./validateAxeRunContext");
describe('validateAxeRunContext', () => {
    describe('when no run context is provided', () => {
        it('does not throw an error', () => {
            chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)());
        });
    });
    describe('given a valid run context', () => {
        describe('when the run context is a string', () => {
            it('does not throw an error', () => {
                chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ include: 'selector' }));
            });
        });
        describe('when the run context is an array of strings', () => {
            it('does not throw an error', () => {
                chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ include: ['selector1', 'selector2'] }));
            });
        });
        describe('when the run context is an object', () => {
            describe('when the object has an `include` property', () => {
                it('does not throw an error', () => {
                    chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ include: 'selector' }));
                });
                describe('and a `fromFrames` property', () => {
                    it('does not throw an error', () => {
                        chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({
                            include: {
                                fromFrames: ['selector', 'selector']
                            }
                        }));
                    });
                });
                describe('and a `fromShadowDom` property', () => {
                    it('does not throw an error', () => {
                        chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({
                            include: {
                                fromShadowDom: ['selector', 'selector']
                            }
                        }));
                    });
                });
            });
            describe('when the object has an `exclude` property', () => {
                it('does not throw an error', () => {
                    chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ exclude: 'selector' }));
                });
                describe('and a `fromFrames` property', () => {
                    it('does not throw an error', () => {
                        chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({
                            exclude: {
                                fromFrames: ['selector', 'selector']
                            }
                        }));
                    });
                });
                describe('and a `fromShadowDom` property', () => {
                    it('does not throw an error', () => {
                        chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({
                            exclude: {
                                fromShadowDom: ['selector', 'selector']
                            }
                        }));
                    });
                });
            });
            describe('when the object has both `include` and `exclude` properties', () => {
                it('does not throw an error', () => {
                    chai_1.assert.doesNotThrow(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ include: 'selector', exclude: 'selector' }));
                });
            });
        });
    });
    describe('given an invalid run context', () => {
        describe('and does not have an `include` or `exclude` property', () => {
            describe('and is not a string', () => {
                it('throws an error', () => {
                    chai_1.assert.throws(() => (0, validateAxeRunContext_1.validateAxeRunContext)(1));
                });
            });
            describe('and is not an array of strings', () => {
                it('throws an error', () => {
                    chai_1.assert.throws(() => (0, validateAxeRunContext_1.validateAxeRunContext)([1, 2]));
                });
            });
            describe('and does not have a `fromFrames` or `fromShadowDom` property', () => {
                it('throws an error', () => {
                    chai_1.assert.throws(() => (0, validateAxeRunContext_1.validateAxeRunContext)({ a: 'a' }));
                });
            });
        });
    });
});
//# sourceMappingURL=validateAxeRunContext.test.js.map