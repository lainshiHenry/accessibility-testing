"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const constants_1 = require("./constants");
const mergeChromeArgs_1 = __importDefault(require("./mergeChromeArgs"));
describe('mergeChromeArgs', () => {
    describe('given the user has not provided any args', () => {
        describe('when `disableOtherExtensions` is true', () => {
            it('returns the `--load-extension` when `--disable-extensions-except` flags', () => {
                const args = (0, mergeChromeArgs_1.default)([], {
                    disableOtherExtensions: true
                });
                const [loadExtension, disableExtensionsExcept] = args;
                chai_1.assert.lengthOf(args, 2);
                chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
            });
        });
        describe('and `disableOtherExtensions` is false', () => {
            it('only returns the `--load-extension` flag', () => {
                const args = (0, mergeChromeArgs_1.default)([], {
                    disableOtherExtensions: false
                });
                const [loadExtension] = args;
                chai_1.assert.lengthOf(args, 1);
                chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
            });
        });
    });
    describe('given the user has provided args', () => {
        describe('when the user has not provided extension flags', () => {
            describe('when `disableOtherExtensions` is true', () => {
                describe('and the user args and not prefixed with `--`', () => {
                    it('does not modify the user provided args and appends the extension flags', () => {
                        const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'baz=qux,quz', 'quux'], {
                            disableOtherExtensions: true
                        });
                        const [foo, baz, quux, loadExtension, disableExtensionsExcept] = args;
                        chai_1.assert.lengthOf(args, 5);
                        chai_1.assert.equal(foo, 'foo=bar');
                        chai_1.assert.equal(baz, 'baz=qux,quz');
                        chai_1.assert.equal(quux, 'quux');
                        chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                        chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
                    });
                    describe('and the user adds multiple instances of the same flag', () => {
                        it('does not modify the user provided args and appends the extension flags', () => {
                            const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'foo=baz'], {
                                disableOtherExtensions: true
                            });
                            const [foo1, foo2, loadExtension, disableExtensionsExcept] = args;
                            chai_1.assert.lengthOf(args, 4);
                            chai_1.assert.equal(foo1, 'foo=bar');
                            chai_1.assert.equal(foo2, 'foo=baz');
                            chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                            chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
                        });
                        describe('and some values are comma-separated', () => {
                            it('does not modify the user provided args and appends the extension flags', () => {
                                const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'foo=baz,qux'], {
                                    disableOtherExtensions: true
                                });
                                const [foo1, foo2, loadExtension, disableExtensionsExcept] = args;
                                chai_1.assert.lengthOf(args, 4);
                                chai_1.assert.equal(foo1, 'foo=bar');
                                chai_1.assert.equal(foo2, 'foo=baz,qux');
                                chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                                chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
                            });
                        });
                    });
                });
            });
            describe('and `disableOtherExtensions` is false', () => {
                it('does not modify the user provided args and appends the extension flags', () => {
                    const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'baz=qux,quz', 'quux'], {
                        disableOtherExtensions: false
                    });
                    const [foo, baz, quux, loadExtension] = args;
                    chai_1.assert.lengthOf(args, 4);
                    chai_1.assert.equal(foo, 'foo=bar');
                    chai_1.assert.equal(baz, 'baz=qux,quz');
                    chai_1.assert.equal(quux, 'quux');
                    chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                });
                describe('and the user adds multiple instances of the same flag', () => {
                    it('does not modify the user provided args and appends the extension flags', () => {
                        const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'foo=baz'], {
                            disableOtherExtensions: false
                        });
                        chai_1.assert.lengthOf(args, 3);
                        const [foo1, foo2, loadExtension] = args;
                        chai_1.assert.equal(foo1, 'foo=bar');
                        chai_1.assert.equal(foo2, 'foo=baz');
                        chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                    });
                    describe('and some values are comma-separated', () => {
                        it('does not modify the user provided args and appends the extension flags', () => {
                            const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'foo=baz,qux'], {
                                disableOtherExtensions: false
                            });
                            chai_1.assert.lengthOf(args, 3);
                            const [foo1, foo2, loadExtension] = args;
                            chai_1.assert.equal(foo1, 'foo=bar');
                            chai_1.assert.equal(foo2, 'foo=baz,qux');
                            chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                        });
                    });
                });
            });
        });
        describe('when the user has provided extension flags', () => {
            describe('when `disableOtherExtensions` is true', () => {
                describe('and the user extension flags are not prefixed with `--`', () => {
                    it('does not modify the user provided args and appends the extension flags', () => {
                        const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'baz=qux,quz', 'quux', 'load-extension=foo'], {
                            disableOtherExtensions: true
                        });
                        const [foo, baz, quux, loadExtension, disableExtensionsExcept] = args;
                        chai_1.assert.lengthOf(args, 5);
                        chai_1.assert.equal(foo, 'foo=bar');
                        chai_1.assert.equal(baz, 'baz=qux,quz');
                        chai_1.assert.equal(quux, 'quux');
                        chai_1.assert.equal(loadExtension, `load-extension=foo,${constants_1.PATH_TO_EXTENSION}`);
                        chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
                    });
                    describe('and the user adds multiple instances of the same flag', () => {
                        it('does not modify the user provided args and appends the extension flags', () => {
                            const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'load-extension=baz', 'load-extension=qux'], {
                                disableOtherExtensions: true
                            });
                            const [foo, loadExtension1, loadExtension2, disableExtensionsExcept] = args;
                            chai_1.assert.lengthOf(args, 4);
                            chai_1.assert.equal(foo, 'foo=bar');
                            chai_1.assert.equal(loadExtension1, 'load-extension=baz');
                            chai_1.assert.equal(loadExtension2, `load-extension=qux,${constants_1.PATH_TO_EXTENSION}`);
                            chai_1.assert.equal(disableExtensionsExcept, `--disable-extensions-except=${constants_1.PATH_TO_EXTENSION}`);
                        });
                        describe('and some values are comma-separated', () => {
                            it('does not modify the user provided args and appends the extension flags', () => {
                                const args = (0, mergeChromeArgs_1.default)([
                                    'foo=bar',
                                    'foo=baz,qux',
                                    'load-extension=foo',
                                    'disable-extensions-except=quz,quux'
                                ], {
                                    disableOtherExtensions: true
                                });
                                const [foo1, foo2, loadExtension, disableExtensionsExcept] = args;
                                chai_1.assert.lengthOf(args, 4);
                                chai_1.assert.equal(foo1, 'foo=bar');
                                chai_1.assert.equal(foo2, 'foo=baz,qux');
                                chai_1.assert.equal(loadExtension, `load-extension=foo,${constants_1.PATH_TO_EXTENSION}`);
                                chai_1.assert.equal(disableExtensionsExcept, `disable-extensions-except=quz,quux,${constants_1.PATH_TO_EXTENSION}`);
                            });
                        });
                    });
                });
            });
            describe('and `disableOtherExtensions` is false', () => {
                it('does not modify the user provided args and appends the extension flags', () => {
                    const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'baz=qux,quz', 'quux', 'load-extension=foo'], {
                        disableOtherExtensions: false
                    });
                    const [foo, baz, quux, loadExtension] = args;
                    chai_1.assert.lengthOf(args, 4);
                    chai_1.assert.equal(foo, 'foo=bar');
                    chai_1.assert.equal(baz, 'baz=qux,quz');
                    chai_1.assert.equal(quux, 'quux');
                    chai_1.assert.equal(loadExtension, `load-extension=foo,${constants_1.PATH_TO_EXTENSION}`);
                });
                describe('and the user adds multiple instances of the same flag', () => {
                    it('does not modify the user provided args and appends the extension flags', () => {
                        const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'load-extension=baz', 'load-extension=qux'], {
                            disableOtherExtensions: false
                        });
                        const [foo, loadExtension1, loadExtension2] = args;
                        chai_1.assert.lengthOf(args, 3);
                        chai_1.assert.equal(foo, 'foo=bar');
                        chai_1.assert.equal(loadExtension1, 'load-extension=baz');
                        chai_1.assert.equal(loadExtension2, `load-extension=qux,${constants_1.PATH_TO_EXTENSION}`);
                    });
                    describe('and some values are comma-separated', () => {
                        it('does not modify the user provided args and appends the extension flags', () => {
                            const args = (0, mergeChromeArgs_1.default)(['foo=bar', 'foo=baz,qux', 'load-extension=foo,quz,quux'], {
                                disableOtherExtensions: false
                            });
                            const [foo1, foo2, loadExtension] = args;
                            chai_1.assert.lengthOf(args, 3);
                            chai_1.assert.equal(foo1, 'foo=bar');
                            chai_1.assert.equal(foo2, 'foo=baz,qux');
                            chai_1.assert.equal(loadExtension, `load-extension=foo,quz,quux,${constants_1.PATH_TO_EXTENSION}`);
                        });
                    });
                });
                describe('and the user explicity sets the `--disable-extensions-except` flag', () => {
                    it('does not modify the user provided args and appends the extension flags', () => {
                        const args = (0, mergeChromeArgs_1.default)([
                            'foo=bar',
                            'baz=qux,quz',
                            'quux',
                            'disable-extensions-except=foo'
                        ], {
                            disableOtherExtensions: false
                        });
                        const [foo, baz, quux, disableExtensionsExcept, loadExtension] = args;
                        chai_1.assert.lengthOf(args, 5);
                        chai_1.assert.equal(foo, 'foo=bar');
                        chai_1.assert.equal(baz, 'baz=qux,quz');
                        chai_1.assert.equal(quux, 'quux');
                        chai_1.assert.equal(disableExtensionsExcept, `disable-extensions-except=foo,${constants_1.PATH_TO_EXTENSION}`);
                        chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                    });
                    describe('and the user adds multiple instances of the same flag', () => {
                        it('does not modify the user provided args and appends the extension flags', () => {
                            const args = (0, mergeChromeArgs_1.default)([
                                'foo=bar',
                                'disable-extensions-except=baz',
                                '--disable-extensions-except=qux'
                            ], {
                                disableOtherExtensions: false
                            });
                            const [foo, disableExtensionsExcept1, disableExtensionsExcept2, loadExtension] = args;
                            chai_1.assert.lengthOf(args, 4);
                            chai_1.assert.equal(foo, 'foo=bar');
                            chai_1.assert.equal(disableExtensionsExcept1, 'disable-extensions-except=baz');
                            chai_1.assert.equal(disableExtensionsExcept2, `--disable-extensions-except=qux,${constants_1.PATH_TO_EXTENSION}`);
                            chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                        });
                        describe('and some values are comma-separated', () => {
                            it('does not modify the user provided args and appends the extension flags', () => {
                                const args = (0, mergeChromeArgs_1.default)([
                                    'foo=bar',
                                    'foo=baz,qux',
                                    'disable-extensions-except=foo,quz,quux'
                                ], {
                                    disableOtherExtensions: false
                                });
                                const [foo1, foo2, disableExtensionsExcept, loadExtension] = args;
                                chai_1.assert.lengthOf(args, 4);
                                chai_1.assert.equal(foo1, 'foo=bar');
                                chai_1.assert.equal(foo2, 'foo=baz,qux');
                                chai_1.assert.equal(disableExtensionsExcept, `disable-extensions-except=foo,quz,quux,${constants_1.PATH_TO_EXTENSION}`);
                                chai_1.assert.equal(loadExtension, `--load-extension=${constants_1.PATH_TO_EXTENSION}`);
                            });
                        });
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=mergeChromeArgs.test.js.map