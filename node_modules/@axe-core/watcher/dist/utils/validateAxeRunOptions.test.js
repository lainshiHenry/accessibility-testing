"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const chai_1 = require("chai");
const validateAxeRunOptions_1 = require("./validateAxeRunOptions");
describe('validateAxeRunOptions', () => {
    describe('given no options', () => {
        it('does not throw', () => {
            chai_1.assert.doesNotThrow(() => {
                (0, validateAxeRunOptions_1.validateAxeRunOptions)();
            });
        });
    });
    describe('given an option that has not been exposed to be configured', () => {
        it('throws', () => {
            chai_1.assert.throws(() => {
                (0, validateAxeRunOptions_1.validateAxeRunOptions)({ a: 'a' });
            }, /Invalid property found in `runOptions`/i);
        });
    });
    describe('given `ancestry` property is provided', () => {
        describe('when `ancestry` is not a boolean', () => {
            it('throws', () => {
                chai_1.assert.throws(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ ancestry: 'a' });
                }, /`ancestry` property must be a boolean./i);
            });
        });
        describe('when `ancestry` is a boolean', () => {
            it('does not throw', () => {
                chai_1.assert.doesNotThrow(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ ancestry: true });
                });
            });
        });
    });
    describe('given `rules` property is provided', () => {
        describe('when `rules` is not an object', () => {
            it('throws', () => {
                chai_1.assert.throws(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: 'a' });
                }, /`rules` property must be an object./i);
            });
        });
        describe('when `rules` is an array', () => {
            it('throws', () => {
                chai_1.assert.throws(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: ['a'] });
                }, /`rules` property must be an object./i);
            });
        });
        describe('when `rules` is an object', () => {
            describe('when `rules` object has no value', () => {
                it('throws', () => {
                    chai_1.assert.throws(() => {
                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: {} });
                    }, /`rules` object must contain at least one key-value pair./i);
                });
            });
            describe('when `rules` object has a value', () => {
                describe('and the value is not an object', () => {
                    it('throws', () => {
                        chai_1.assert.throws(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: { a: 'a' } });
                        }, /The value of the `a` key in the `rules` object must be an object./i);
                    });
                });
                describe('and the value is an object', () => {
                    describe('and the value has no properties', () => {
                        it('throws', () => {
                            chai_1.assert.throws(() => {
                                (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: { a: {} } });
                            }, /The `a` key in the `rules` object must only contain the `enabled` property./i);
                        });
                    });
                    describe('and the value has properties', () => {
                        describe('and the value does not have an `enabled` property', () => {
                            it('throws', () => {
                                chai_1.assert.throws(() => {
                                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: { a: { b: 'a' } } });
                                }, /The `a` key in the `rules` object must contain an `enabled` property./i);
                            });
                        });
                        describe('and the value has an `enabled` property', () => {
                            describe('and the `enabled` property is not a boolean', () => {
                                it('throws', () => {
                                    chai_1.assert.throws(() => {
                                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: { a: { enabled: 'a' } } });
                                    }, /The `enabled` property of the `a` key in the `rules` object must be a boolean./i);
                                });
                            });
                            describe('and the `enabled` property is a boolean', () => {
                                it('does not throw', () => {
                                    chai_1.assert.doesNotThrow(() => {
                                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ rules: { a: { enabled: true } } });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
    describe('given `runOnly` property is provided', () => {
        describe('when `runOnly` is a string', () => {
            it('does not throw', () => {
                chai_1.assert.doesNotThrow(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: 'a' });
                });
            });
        });
        describe('when `runOnly` is an array', () => {
            describe('and the array is empty', () => {
                it('throws', () => {
                    chai_1.assert.throws(() => {
                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: [] });
                    }, /`runOnly` array must contain at least one string value./i);
                });
            });
            describe('and the array is not empty', () => {
                describe('and the array is not an array of strings', () => {
                    it('throws', () => {
                        chai_1.assert.throws(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: ['a', 1] });
                        }, /`runOnly` array must contain only strings./i);
                    });
                });
                describe('and the array is an array of strings', () => {
                    it('does not throw', () => {
                        chai_1.assert.doesNotThrow(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: ['a, b'] });
                        });
                    });
                });
            });
        });
        describe('when `runOnly` is not a string, array or object', () => {
            it('throws', () => {
                chai_1.assert.throws(() => {
                    (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: 1 });
                }, /`runOnly` property must be an object, an array, or a string./i);
            });
        });
        describe('when `runOnly` is an object', () => {
            describe('and the object has no `type` property', () => {
                it('throws', () => {
                    chai_1.assert.throws(() => {
                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: {} });
                    }, /`runOnly` object must contain a `type` property./i);
                });
            });
            describe('and the object has no `values` property', () => {
                it('throws', () => {
                    chai_1.assert.throws(() => {
                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: { type: 'rule' } });
                    }, /`runOnly` object must contain a `values` property./i);
                });
            });
            describe('and the object has an invalid `type` property', () => {
                it('throws', () => {
                    chai_1.assert.throws(() => {
                        (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: { type: 'a', values: ['a'] } });
                    }, /`runOnly` object's `type` property must be one of the following:/i);
                });
            });
            describe('and the object has a valid `type` property', () => {
                describe('and the `values` property is not an array', () => {
                    it('throws', () => {
                        chai_1.assert.throws(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: { type: 'rule', values: 'a' } });
                        }, /`runOnly` object's `values` property must be an array./i);
                    });
                });
                describe('and the `values` property is an empty array', () => {
                    it('throws', () => {
                        chai_1.assert.throws(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({ runOnly: { type: 'rule', values: [] } });
                        }, /`runOnly` object's `values` property must contain at least one value./i);
                    });
                });
                describe('and the `values` property is an array of non-strings', () => {
                    it('throws', () => {
                        chai_1.assert.throws(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({
                                runOnly: { type: 'rule', values: ['a', 1] }
                            });
                        }, /`runOnly` object's `values` property must contain only strings./i);
                    });
                });
                describe('and the `values` property is an array of strings', () => {
                    it('does not throw', () => {
                        chai_1.assert.doesNotThrow(() => {
                            (0, validateAxeRunOptions_1.validateAxeRunOptions)({
                                runOnly: { type: 'rule', values: ['a', 'b'] }
                            });
                        });
                    });
                });
            });
        });
    });
    describe('given a valid `runOnly` object', () => {
        it('does not throw', () => {
            chai_1.assert.doesNotThrow(() => {
                (0, validateAxeRunOptions_1.validateAxeRunOptions)({
                    runOnly: { type: 'rule', values: ['ruleId1'] },
                    ancestry: true,
                    rules: { a: { enabled: true } }
                });
            });
        });
    });
});
//# sourceMappingURL=validateAxeRunOptions.test.js.map