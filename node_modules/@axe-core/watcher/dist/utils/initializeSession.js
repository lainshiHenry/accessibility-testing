"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sync_request_1 = __importDefault(require("sync-request"));
const assert_1 = __importDefault(require("assert"));
const createDebugger_1 = __importDefault(require("../createDebugger"));
const uuid_1 = require("uuid");
const debugLogger = (0, createDebugger_1.default)('config:initializeSession');
function initializeSession({ apiKey, serverURL, watcherVersion, sessionID, buildID, gitCommitSha }) {
    (0, assert_1.default)(apiKey, 'API key is required');
    (0, assert_1.default)(serverURL, 'Server URL is required');
    (0, assert_1.default)(watcherVersion, 'Watcher version is required');
    (0, assert_1.default)(!(sessionID && typeof sessionID !== 'string'), 'Session ID must be a string');
    (0, assert_1.default)(!(buildID && typeof buildID !== 'string'), 'Build ID must be a string');
    (0, assert_1.default)(!(sessionID && buildID), 'Session ID and Build ID are mutually exclusive. `sessionId` is deprecated, please use `buildID` instead');
    (0, assert_1.default)(!(gitCommitSha && typeof gitCommitSha !== 'string'), 'Git commit SHA must be a string');
    const url = new URL(`/api-pub/watcher/sessions`, serverURL);
    const res = (0, sync_request_1.default)('POST', url.toString(), {
        headers: {
            'X-API-Key': apiKey
        },
        json: {
            watcher_version: watcherVersion,
            session_id: sessionID,
            build_id: buildID,
            git_commit_sha: gitCommitSha
        }
    });
    const body = JSON.parse(res.getBody('utf8'));
    if (body.errors.length) {
        debugLogger('Error initializing session:', body.errors);
        throw new Error(body.errors.join(', '));
    }
    if (body.warnings.length) {
        debugLogger('Warning initializing session:', body.warnings);
        console.warn(body.warnings.join(', '));
    }
    if (body.session_id) {
        debugLogger('Session initialized successfully:', body.session_id);
        return body.session_id;
    }
    if (sessionID) {
        debugLogger('Session failed to initialize. Returning the provided sessionID:', sessionID);
        return sessionID;
    }
    if (buildID) {
        debugLogger('Session failed to initialize based on the provided buildID:', buildID);
        throw new Error('Failed to initialize session based on build_id. Try again later.');
    }
    const generatedID = (0, uuid_1.v4)();
    debugLogger('Session did not initialize successfully. Returning a generated UUID:', generatedID);
    return generatedID;
}
exports.default = initializeSession;
//# sourceMappingURL=initializeSession.js.map