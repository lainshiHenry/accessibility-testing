"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAxeRunOptions = validateAxeRunOptions;
exports.isObject = isObject;
const VALID_RUN_ONLY_TYPES = [
    'rules',
    'rule',
    'tag',
    'tags'
];
function validateAxeRunOptions(runOptions = undefined) {
    if (!runOptions) {
        return;
    }
    const runOptionsKeys = Object.keys(runOptions);
    const validKeys = [
        'runOnly',
        'rules',
        'ancestry'
    ];
    for (const key of runOptionsKeys) {
        switch (key) {
            case 'ancestry':
                if (!isBoolean(runOptions.ancestry)) {
                    throw new Error('`ancestry` property must be a boolean. Full example: `{ ancestry: true }`');
                }
                break;
            case 'rules':
                validateRulesProperty(runOptions.rules);
                break;
            case 'runOnly':
                validateRunOnlyProperty(runOptions.runOnly);
                break;
            default:
                throw new Error(`Invalid property found in \`runOptions\`: ${key}. The available properties are: ${validKeys.join(', ')}`);
        }
    }
}
function isObject(value) {
    return value !== null && typeof value === 'object' && !Array.isArray(value);
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function validateRulesProperty(rules) {
    if (!isObject(rules)) {
        throw new Error('`rules` property must be an object. Full example: `{ rules: { "ruleId": { enabled: false } } }`');
    }
    if (!Object.keys(rules).length) {
        throw new Error('`rules` object must contain at least one key-value pair. Full example: `{ rules: { "ruleId": { enabled: false } } }`');
    }
    for (const ruleKey of Object.keys(rules)) {
        const ruleValue = rules[ruleKey];
        if (!isObject(ruleValue)) {
            throw new Error(`The value of the \`${ruleKey}\` key in the \`rules\` object must be an object. Full example: \`{ rules: { "ruleId": { enabled: false } } }\``);
        }
        if (Object.keys(ruleValue).length !== 1) {
            throw new Error(`The \`${ruleKey}\` key in the \`rules\` object must only contain the \`enabled\` property. Full example: \`{ rules: { "ruleId": { enabled: false } } }\``);
        }
        if (!('enabled' in ruleValue)) {
            throw new Error(`The \`${ruleKey}\` key in the \`rules\` object must contain an \`enabled\` property. Full example: \`{ rules: { "ruleId": { enabled: false } } }\``);
        }
        if (!isBoolean(ruleValue.enabled)) {
            throw new Error(`The \`enabled\` property of the \`${ruleKey}\` key in the \`rules\` object must be a boolean. Full example: \`{ rules: { "ruleId": { enabled: false } } }\``);
        }
    }
}
function validateRunOnlyProperty(runOnly) {
    const isRunOnlyObject = isObject(runOnly);
    const isRunOnlyArray = Array.isArray(runOnly);
    const isRunOnlyString = typeof runOnly === 'string';
    if (!isRunOnlyObject && !isRunOnlyArray && !isRunOnlyString) {
        throw new Error(`\`runOnly\` property must be an object, an array, or a string. Examples: \n
        - Object: { runOnly: { type: 'rule', values: ['ruleId1'] } }\n
        - Array: { runOnly: ['ruleId1', 'ruleId2', 'ruleId3'] }\n
        - String: { runOnly: 'ruleId1' }\n

        For more detailed examples: https://www.deque.com/axe/core-documentation/api-documentation/#options-parameter 
      `);
    }
    if (isRunOnlyArray) {
        if (!runOnly.length) {
            throw new Error(`\`runOnly\` array must contain at least one string value. Example: { runOnly: ['ruleId1', 'ruleId2'] }`);
        }
        if (runOnly.some(value => typeof value !== 'string')) {
            throw new Error(`\`runOnly\` array must contain only strings. Example: { runOnly: ['ruleId1', 'ruleId2'] }`);
        }
    }
    if (isRunOnlyObject) {
        if (!('type' in runOnly)) {
            throw new Error(`\`runOnly\` object must contain a \`type\` property. Example: { runOnly: { type: 'rule', values: ['ruleId1'] } }`);
        }
        if (!('values' in runOnly)) {
            throw new Error(`\`runOnly\` object must contain a \`values\` property. Example: { runOnly: { type: 'rule', values: ['ruleId1'] } }`);
        }
        if (!VALID_RUN_ONLY_TYPES.includes(runOnly.type)) {
            throw new Error(`\`runOnly\` object's \`type\` property must be one of the following: ${VALID_RUN_ONLY_TYPES.join(', ')}`);
        }
        if (!Array.isArray(runOnly.values)) {
            throw new Error(`\`runOnly\` object's \`values\` property must be an array. Example: { runOnly: { type: 'rule', values: ['ruleId1'] } }`);
        }
        if (!runOnly.values.length) {
            throw new Error(`\`runOnly\` object's \`values\` property must contain at least one value. Example: { runOnly: { type: 'rule', values: ['ruleId1'] } }`);
        }
        if (runOnly.values.some(value => typeof value !== 'string')) {
            throw new Error(`\`runOnly\` object's \`values\` property must contain only strings. Example: { runOnly: { type: 'rule', values: ['ruleId1'] } }`);
        }
    }
}
//# sourceMappingURL=validateAxeRunOptions.js.map