"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendResultsToServer = exports.MAX_PAGE_STATES_PER_REQUEST = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const uuid_1 = require("uuid");
const readVariables_1 = __importDefault(require("./utils/readVariables"));
const { version } = require('../package.json');
exports.MAX_PAGE_STATES_PER_REQUEST = 5;
const sendResultsToServer = async ({ results, debugLogger }) => {
    const { server_url, api_key, session_id, git_data } = (0, readVariables_1.default)();
    const resultsURL = new URL(`/api-pub/watcher/sessions/${session_id}`, server_url);
    const screenshotsURL = new URL(`/api-pub/watcher/sessions/${session_id}/screenshots`, server_url);
    debugLogger('SendResultsToServer: Received results', {
        total: results.length,
        totalBytes: Buffer.byteLength(JSON.stringify(results))
    });
    debugLogger('SendResultsToServer: Session ID', { session_id });
    const putResults = async (bodyResults = []) => {
        const body = {
            axe_watcher_version: version,
            results: bodyResults,
            ...git_data
        };
        const res = await (0, node_fetch_1.default)(resultsURL, {
            method: 'PUT',
            redirect: 'follow',
            headers: {
                'Content-Type': 'application/json',
                'X-API-Key': api_key
            },
            body: JSON.stringify(body)
        });
        if (!res.ok) {
            debugLogger('SendResultsToServer: Failed to send results', {
                batchResults: bodyResults.length,
                reqSize: Buffer.byteLength(JSON.stringify(body)),
                resStatus: res.status,
                resStatusText: res.statusText
            });
            console.warn('@axe-core/watcher: Unable to send results to server');
        }
        else {
            debugLogger('SendResultsToServer: Successfully sent', {
                batchResults: bodyResults.length,
                reqSize: Buffer.byteLength(JSON.stringify(body)),
                resStatus: res.status,
                resStatusText: res.statusText
            });
        }
    };
    results.forEach(result => {
        if (result.screenshot) {
            result.screenshot_id = (0, uuid_1.v4)();
        }
    });
    for (let i = 0; i < results.length; i += exports.MAX_PAGE_STATES_PER_REQUEST) {
        const batch = results
            .slice(i, i + exports.MAX_PAGE_STATES_PER_REQUEST)
            .map(r => ({ ...r, screenshot: null }));
        await putResults(batch);
    }
    await Promise.all(results.map(async ({ screenshot, screenshot_id }) => {
        if (!screenshot) {
            return;
        }
        const url = new URL(screenshotsURL.href);
        url.searchParams.set('screenshot_id', screenshot_id);
        const { ok } = await (0, node_fetch_1.default)(url, {
            method: 'POST',
            redirect: 'follow',
            headers: {
                'Content-Type': 'image/png',
                'X-API-Key': api_key
            },
            body: screenshot
        });
        if (!ok) {
            console.warn('@axe-core/watcher: Unable to send screenshot to server');
        }
    }));
};
exports.sendResultsToServer = sendResultsToServer;
exports.default = exports.sendResultsToServer;
//# sourceMappingURL=sendResultsToServer.js.map